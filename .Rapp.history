makeCacheMatrix <- function(x = matrix()) {#
	inverse<-NULL#
	set<-function(y){#
		x<<-y#
		inverse<<-NULL#
	}#
	get<-function()x#
	set_inverse<-function(solve)inverse<<-inverse#
	get_inverse<-function()inverse#
	list(set=set,get=get, set_inverse=set_inverse, get_inverse=get_inverse)#
}#
## Write a short comment describing this function#
#
cacheSolve <- function(x, ...) {#
        ## Return a matrix that is the inverse of 'x'#
        inverse<-x$get_inverse()#
        if(!is.null(inverse)){#
        	message("getting cached data")#
        	return(inverse)#
        }#
        data<=x$get()#
        inverse<-solve(data,...)#
        x$set_inverse(inverse)#
        inverse#
}
m1<-matrix(c(1/2,-1/4,-1,3/4),nrow=2,ncol=2)
m1
myMatrix_object<-makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
makeCacheMatrix <- function(x = matrix()) {#
	inverse<-NULL#
	set<-function(y){#
		x<<-y#
		inverse<<-NULL#
	}#
	get<-function()x#
	set_inverse<-function(solve)inverse<<-inverse#
	get_inverse<-function()inverse#
	list(set=set,get=get, set_inverse=set_inverse, get_inverse=get_inverse)#
}#
## Write a short comment describing this function#
#
cacheSolve <- function(x, ...) {#
        ## Return a matrix that is the inverse of 'x'#
        inverse<-x$get_inverse()#
        if(!is.null(inverse)){#
        	message("getting cached data")#
        	return(inverse)#
        }#
        data<-x$get()#
        inverse<-solve(data,...)#
        x$set_inverse(inverse)#
        inverse#
}
myMatrix_object(makeCacheMatrix(m1))
myMatrix_object<-makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
